let extern mkDiv: (I ⊸ ∃i:Id. Widget i) = "_mkDiv" in
let extern mkButton: (I ⊸ ∃(i:Id). Widget i) = "_mkButton" in
let extern mkText: (I ⊸ ∃(i:Id). Widget i) = "_mkText" in
let extern mkUList: (I ⊸ ∃(i:Id). Widget i) = "_mkUList" in
let extern mkOList: (I ⊸ ∃(i:Id). Widget i) = "_mkOList" in
let extern mkListItem: (I ⊸ ∃(i:Id). Widget i) = "_mkListItem" in
let extern mkSlider: (F Num ⊗ F Num ⊗ F Num ⊸ ∃(i:Id). Widget i) = "_mkSlider" in
let extern dropWidget: (∀(i:Id). Widget i ⊸ I) = "_dropWidget" in
let extern onClick: (∀(i:Id). Widget i ⊸ (Widget i ⊗ ♢I)) = "_onClick" in
let extern onChange: (∀(i:Id). Widget i ⊸ Widget i ⊗ ♢I) = "_onChange" in
let extern setText: (∀(i:Id). ((Widget i ⊗ F(String)) ⊸ Widget i)) = "_setText" in
let extern setColor: (∀(i:Id). ((Widget i ⊗ F(Color)) ⊸ Widget i)) = "_setColor" in
let extern setFont: (∀(i:Id). ((Widget i ⊗ F(String)) ⊸ Widget i)) = "_setFont" in
let extern setSize: (∀(i:Id). ((Widget i ⊗ F(Num)) ⊸ Widget i)) = "_setSize" in
let extern getValue: ∀a:*. ∀i:Id. Widget i ⊸ Widget i ⊗ a = "_getValue" in
let extern split: (∀(i:Id).∀(t:Time). Widget i ⊸ (Prefix i t ⊗ (Widget i @ t))) = "_split" in
let extern join: (∀(i:Id).∀(t:Time). (Prefix i t ⊗ (Widget i @ t)) ⊸ Widget i) = "_join" in
let extern attach: ∀i:Id. ∀j:Id. Widget i ⊗ Widget j ⊸ Widget i = "_attach" in
let extern Red: (Color) = "_red" in
let extern Blue: (Color) = "_blue" in 
let extern Green: (Color) = "_green" in
let extern Yellow: (Color) = "_yellow" in
let extern Pink: (Color) = "_pink" in 
let extern log: (F String ⊸ I) = "_log" in 
let extern itos: (F Num ⊸ F String) = "_itos" in